### This is the main way to configure the application (other than annotations).
### This file is in Yaml format but you can also configure spring boot using the traditional
### Java properties file format. 

spring.jmx:
   enabled: false

server:
  port: 8090

spring:
  data:
    mongodb:
      host: localhost
      port: 27017
      database: app1
#todo: make sure to always enable security in production
security:
  basic:
    enabled: false

#management endpoints on a separate port
management:
  port: 8091
  security:
    enabled: false # management port is internal only. no need to secure it.

#default project info followed by actual injected pom-specified values.
project:
  name: spring-boot-rest-example
  version: 0.1
  description: boot-example default description
info:
  build:
    artifact: ${project.artifactId}
    name: ${project.name}
    description: ${project.description}
    version: ${project.version}

hotel.service:
  name: 'default profile:'
---
spring:
  profiles: test
  h2:
    console:
      enabled: true

spring.jpa:
    hibernate.ddl-auto: create-drop

hotel.service:
  name: 'test profile:'
  
logging:
  file: boot_example.log
  org.hibernate: INFO

---
spring:
  profiles: mysql

#  datasource:
#    driverClassName: com.mysql.jdbc.Driver
#    url: jdbc:mysql://192.168.99.100:3306/sample_db?createDatabaseIfNotExist=true
#    username: root
#    password: root    
#
#  jpa:
#    hibernate:
#      dialect: org.hibernate.dialect.MySQLInnoDBDialect
#      ddl-auto: create-drop # todo: in non-dev environments, comment this out:


hotel.service:
  name: 'test profile:'
 